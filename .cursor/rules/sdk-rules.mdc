---
globs: apps/sdk/*
alwaysApply: false
---

# Sanity App SDK Development Rules

## Overview
This application uses the **Sanity App SDK** (`@sanity/sdk-react`) for creating Sanity applications with React hooks and components, and **Sanity UI** (`@sanity/ui`) as the primary UI component library.

**Official Documentation:** 
- SDK: https://reference.sanity.io/_sanity/sdk-react/
- UI: https://www.sanity.io/ui/docs

## Development Guidelines

### 1. SDK-First Approach
When working in the `apps/sdk/` directory, you MUST:

- **Prioritize SDK solutions**: Always use hooks and helpers from `@sanity/sdk-react` first
- **Avoid redundant packages**: Only use other Sanity packages (`@sanity/client`, `@sanity/ui`, etc.) AFTER confirming the SDK cannot accomplish the task
- **Check SDK capabilities**: Before implementing custom solutions, verify if the SDK provides the needed functionality

### 2. Preferred SDK Usage Patterns

#### React Hooks
Use SDK React hooks for:
- Data fetching and mutations
- Authentication and user management
- Document operations
- Real-time subscriptions
- Studio integration

#### SDK Components and Utilities
Use SDK-provided components and utilities for:
- UI components that integrate with Sanity
- Form handling
- Validation
- Error handling

#### Sanity UI Components
This application uses **Sanity UI** (`@sanity/ui`) as the primary UI component library. When building interfaces, you MUST:

- **Default to Sanity UI components**: Always use components from `@sanity/ui` first (Button, Card, Text, Box, Flex, etc.)
- **Leverage the theme system**: Use Sanity UI's built-in theming for consistent styling
- **Use Sanity UI primitives**: Prefer Sanity UI layout and typography components over custom HTML elements
- **Reference Sanity UI documentation**: https://www.sanity.io/ui/docs for component APIs and examples

**Available through SanityUI provider:**
- The app includes a `SanityUI` wrapper component that provides ThemeProvider and ToastProvider
- All components have access to the Sanity UI theme and design system
- Consistent spacing, colors, and typography are automatically applied

### 3. Documentation and References

Always reference the official SDK documentation when:
- Implementing new features
- Debugging issues
- Understanding available APIs
- Finding code examples

**Primary Resources:**
- App SDK reference docs
- SDK Explorer for example implementations
- Conceptual overview and quickstart guide

### 4. Development Workflow

1. **Research SDK capabilities** before writing custom code
2. **Use SDK hooks and components** as the primary solution for data operations
3. **Use Sanity UI components** as the primary solution for all UI elements
4. **Fallback to other packages** only when SDK and Sanity UI are insufficient
5. **Document any non-SDK/non-Sanity-UI usage** with justification

**UI Development Priority:**
- First: Check if Sanity UI has the needed component
- Second: Compose existing Sanity UI components to create the desired interface
- Last resort: Use custom HTML elements or third-party UI libraries

### 5. Code Organization

- Import SDK hooks and components as the primary dependencies
- **Import Sanity UI components** for all UI elements before considering custom HTML or other UI libraries
- Group imports in this order:
  1. React and third-party libraries
  2. `@sanity/sdk-react` hooks and utilities
  3. `@sanity/ui` components
  4. Other Sanity packages (only when necessary)
- Comment when using non-SDK or non-Sanity-UI solutions and why

**Example import structure:**
```typescript
import React from 'react'
import {useDocument, useEditDocument} from '@sanity/sdk-react'
import {Box, Button, Card, Flex, Text} from '@sanity/ui'
import {SomeIcon} from '@sanity/icons' // Only if needed
```


### 6. Migration and Updates

When updating or refactoring:
- Check if newer SDK versions provide better solutions
- Migrate from direct Sanity package usage to SDK equivalents when possible
- Follow SDK migration guides for version updates